services:
  # --- Spring Boot ---
  backend:
    build:
      context: .                     # Dockerfile 위치 (루트)
      dockerfile: Dockerfile
    container_name: pado-backend-dev
    depends_on:
      db:
        condition: service_healthy
      mongo:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8080:8080"

  # --- Database ---
  db:
    image: mysql:8.0
    container_name: pado-db-dev
    env_file:
      - .env
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER:     ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASS}
      MYSQL_ROOT_PASSWORD: ${DB_PASS}
    volumes:
      - db-data:/var/lib/mysql
    ports:
      - "${DB_PORT}:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 3s
      retries: 5

 # --- MongoDB ---
  mongo:
    image: mongo:8.0
    container_name: pado-mongo-dev
    command: ["mongod", "--quiet"]
    env_file:
      - .env
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASS}
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--username", "${MONGO_USER}", "--password", "${MONGO_PASS}", "--authenticationDatabase", "admin", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "1"

volumes:
  db-data:
    name: pado-db-data-dev
  mongo-data:
    name: pado-mongo-data-dev