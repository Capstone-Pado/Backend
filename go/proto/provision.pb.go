// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: provision.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EC2Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceType  string                 `protobuf:"bytes,1,opt,name=InstanceType,proto3" json:"InstanceType,omitempty"`
	Region        string                 `protobuf:"bytes,2,opt,name=Region,proto3" json:"Region,omitempty"`
	AMI           string                 `protobuf:"bytes,3,opt,name=AMI,proto3" json:"AMI,omitempty"`
	InstanceName  string                 `protobuf:"bytes,4,opt,name=InstanceName,proto3" json:"InstanceName,omitempty"`
	OpenPorts     []int32                `protobuf:"varint,5,rep,packed,name=OpenPorts,proto3" json:"OpenPorts,omitempty"`
	AWSAccessKey  string                 `protobuf:"bytes,6,opt,name=AWSAccessKey,proto3" json:"AWSAccessKey,omitempty"`
	AWSSecretKey  string                 `protobuf:"bytes,7,opt,name=AWSSecretKey,proto3" json:"AWSSecretKey,omitempty"`
	ComponentId   string                 `protobuf:"bytes,8,opt,name=ComponentId,proto3" json:"ComponentId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EC2Request) Reset() {
	*x = EC2Request{}
	mi := &file_provision_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EC2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EC2Request) ProtoMessage() {}

func (x *EC2Request) ProtoReflect() protoreflect.Message {
	mi := &file_provision_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EC2Request.ProtoReflect.Descriptor instead.
func (*EC2Request) Descriptor() ([]byte, []int) {
	return file_provision_proto_rawDescGZIP(), []int{0}
}

func (x *EC2Request) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *EC2Request) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *EC2Request) GetAMI() string {
	if x != nil {
		return x.AMI
	}
	return ""
}

func (x *EC2Request) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *EC2Request) GetOpenPorts() []int32 {
	if x != nil {
		return x.OpenPorts
	}
	return nil
}

func (x *EC2Request) GetAWSAccessKey() string {
	if x != nil {
		return x.AWSAccessKey
	}
	return ""
}

func (x *EC2Request) GetAWSSecretKey() string {
	if x != nil {
		return x.AWSSecretKey
	}
	return ""
}

func (x *EC2Request) GetComponentId() string {
	if x != nil {
		return x.ComponentId
	}
	return ""
}

type S3Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BucketName    string                 `protobuf:"bytes,1,opt,name=BucketName,proto3" json:"BucketName,omitempty"`
	Region        string                 `protobuf:"bytes,2,opt,name=Region,proto3" json:"Region,omitempty"`
	AWSAccessKey  string                 `protobuf:"bytes,3,opt,name=AWSAccessKey,proto3" json:"AWSAccessKey,omitempty"`
	AWSSecretKey  string                 `protobuf:"bytes,4,opt,name=AWSSecretKey,proto3" json:"AWSSecretKey,omitempty"`
	ComponentId   string                 `protobuf:"bytes,5,opt,name=ComponentId,proto3" json:"ComponentId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *S3Request) Reset() {
	*x = S3Request{}
	mi := &file_provision_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Request) ProtoMessage() {}

func (x *S3Request) ProtoReflect() protoreflect.Message {
	mi := &file_provision_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Request.ProtoReflect.Descriptor instead.
func (*S3Request) Descriptor() ([]byte, []int) {
	return file_provision_proto_rawDescGZIP(), []int{1}
}

func (x *S3Request) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *S3Request) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *S3Request) GetAWSAccessKey() string {
	if x != nil {
		return x.AWSAccessKey
	}
	return ""
}

func (x *S3Request) GetAWSSecretKey() string {
	if x != nil {
		return x.AWSSecretKey
	}
	return ""
}

func (x *S3Request) GetComponentId() string {
	if x != nil {
		return x.ComponentId
	}
	return ""
}

type GitCredential struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Key           string                 `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitCredential) Reset() {
	*x = GitCredential{}
	mi := &file_provision_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCredential) ProtoMessage() {}

func (x *GitCredential) ProtoReflect() protoreflect.Message {
	mi := &file_provision_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCredential.ProtoReflect.Descriptor instead.
func (*GitCredential) Descriptor() ([]byte, []int) {
	return file_provision_proto_rawDescGZIP(), []int{2}
}

func (x *GitCredential) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GitCredential) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ReactRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ParentComponentId string                 `protobuf:"bytes,1,opt,name=ParentComponentId,proto3" json:"ParentComponentId,omitempty"`
	GitCredential     *GitCredential         `protobuf:"bytes,2,opt,name=GitCredential,proto3" json:"GitCredential,omitempty"`
	ComponentId       string                 `protobuf:"bytes,3,opt,name=ComponentId,proto3" json:"ComponentId,omitempty"`
	GitRepo           string                 `protobuf:"bytes,4,opt,name=GitRepo,proto3" json:"GitRepo,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ReactRequest) Reset() {
	*x = ReactRequest{}
	mi := &file_provision_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactRequest) ProtoMessage() {}

func (x *ReactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provision_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactRequest.ProtoReflect.Descriptor instead.
func (*ReactRequest) Descriptor() ([]byte, []int) {
	return file_provision_proto_rawDescGZIP(), []int{3}
}

func (x *ReactRequest) GetParentComponentId() string {
	if x != nil {
		return x.ParentComponentId
	}
	return ""
}

func (x *ReactRequest) GetGitCredential() *GitCredential {
	if x != nil {
		return x.GitCredential
	}
	return nil
}

func (x *ReactRequest) GetComponentId() string {
	if x != nil {
		return x.ComponentId
	}
	return ""
}

func (x *ReactRequest) GetGitRepo() string {
	if x != nil {
		return x.GitRepo
	}
	return ""
}

type MySQLRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MySQLRootPassword string                 `protobuf:"bytes,1,opt,name=MySQLRootPassword,proto3" json:"MySQLRootPassword,omitempty"`
	MySQLDatabase     string                 `protobuf:"bytes,2,opt,name=MySQLDatabase,proto3" json:"MySQLDatabase,omitempty"`
	MySQLUser         string                 `protobuf:"bytes,3,opt,name=MySQLUser,proto3" json:"MySQLUser,omitempty"`
	MySQLPassword     string                 `protobuf:"bytes,4,opt,name=MySQLPassword,proto3" json:"MySQLPassword,omitempty"`
	Port              int32                  `protobuf:"varint,5,opt,name=Port,proto3" json:"Port,omitempty"`
	ParentComponentId string                 `protobuf:"bytes,6,opt,name=ParentComponentId,proto3" json:"ParentComponentId,omitempty"`
	ComponentId       string                 `protobuf:"bytes,7,opt,name=ComponentId,proto3" json:"ComponentId,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MySQLRequest) Reset() {
	*x = MySQLRequest{}
	mi := &file_provision_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MySQLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLRequest) ProtoMessage() {}

func (x *MySQLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provision_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLRequest.ProtoReflect.Descriptor instead.
func (*MySQLRequest) Descriptor() ([]byte, []int) {
	return file_provision_proto_rawDescGZIP(), []int{4}
}

func (x *MySQLRequest) GetMySQLRootPassword() string {
	if x != nil {
		return x.MySQLRootPassword
	}
	return ""
}

func (x *MySQLRequest) GetMySQLDatabase() string {
	if x != nil {
		return x.MySQLDatabase
	}
	return ""
}

func (x *MySQLRequest) GetMySQLUser() string {
	if x != nil {
		return x.MySQLUser
	}
	return ""
}

func (x *MySQLRequest) GetMySQLPassword() string {
	if x != nil {
		return x.MySQLPassword
	}
	return ""
}

func (x *MySQLRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MySQLRequest) GetParentComponentId() string {
	if x != nil {
		return x.ParentComponentId
	}
	return ""
}

func (x *MySQLRequest) GetComponentId() string {
	if x != nil {
		return x.ComponentId
	}
	return ""
}

type SpringRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ParentComponentId string                 `protobuf:"bytes,1,opt,name=ParentComponentId,proto3" json:"ParentComponentId,omitempty"`
	GitRepo           string                 `protobuf:"bytes,2,opt,name=GitRepo,proto3" json:"GitRepo,omitempty"`
	NginxPort         int32                  `protobuf:"varint,3,opt,name=NginxPort,proto3" json:"NginxPort,omitempty"`
	BuildTool         string                 `protobuf:"bytes,4,opt,name=BuildTool,proto3" json:"BuildTool,omitempty"`
	JDKVersion        string                 `protobuf:"bytes,5,opt,name=JDKVersion,proto3" json:"JDKVersion,omitempty"`
	Env               map[string]string      `protobuf:"bytes,6,rep,name=Env,proto3" json:"Env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	GitCredential     *GitCredential         `protobuf:"bytes,7,opt,name=GitCredential,proto3" json:"GitCredential,omitempty"`
	DockerPort        int32                  `protobuf:"varint,8,opt,name=DockerPort,proto3" json:"DockerPort,omitempty"`
	ComponentId       string                 `protobuf:"bytes,9,opt,name=ComponentId,proto3" json:"ComponentId,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SpringRequest) Reset() {
	*x = SpringRequest{}
	mi := &file_provision_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpringRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpringRequest) ProtoMessage() {}

func (x *SpringRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provision_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpringRequest.ProtoReflect.Descriptor instead.
func (*SpringRequest) Descriptor() ([]byte, []int) {
	return file_provision_proto_rawDescGZIP(), []int{5}
}

func (x *SpringRequest) GetParentComponentId() string {
	if x != nil {
		return x.ParentComponentId
	}
	return ""
}

func (x *SpringRequest) GetGitRepo() string {
	if x != nil {
		return x.GitRepo
	}
	return ""
}

func (x *SpringRequest) GetNginxPort() int32 {
	if x != nil {
		return x.NginxPort
	}
	return 0
}

func (x *SpringRequest) GetBuildTool() string {
	if x != nil {
		return x.BuildTool
	}
	return ""
}

func (x *SpringRequest) GetJDKVersion() string {
	if x != nil {
		return x.JDKVersion
	}
	return ""
}

func (x *SpringRequest) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *SpringRequest) GetGitCredential() *GitCredential {
	if x != nil {
		return x.GitCredential
	}
	return nil
}

func (x *SpringRequest) GetDockerPort() int32 {
	if x != nil {
		return x.DockerPort
	}
	return 0
}

func (x *SpringRequest) GetComponentId() string {
	if x != nil {
		return x.ComponentId
	}
	return ""
}

type StartEC2SpringRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EC2           *EC2Request            `protobuf:"bytes,1,opt,name=EC2,proto3" json:"EC2,omitempty"`
	Spring        *SpringRequest         `protobuf:"bytes,2,opt,name=Spring,proto3" json:"Spring,omitempty"`
	DeploymentId  string                 `protobuf:"bytes,3,opt,name=DeploymentId,proto3" json:"DeploymentId,omitempty"`
	First         bool                   `protobuf:"varint,4,opt,name=first,proto3" json:"first,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartEC2SpringRequest) Reset() {
	*x = StartEC2SpringRequest{}
	mi := &file_provision_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartEC2SpringRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartEC2SpringRequest) ProtoMessage() {}

func (x *StartEC2SpringRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provision_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartEC2SpringRequest.ProtoReflect.Descriptor instead.
func (*StartEC2SpringRequest) Descriptor() ([]byte, []int) {
	return file_provision_proto_rawDescGZIP(), []int{6}
}

func (x *StartEC2SpringRequest) GetEC2() *EC2Request {
	if x != nil {
		return x.EC2
	}
	return nil
}

func (x *StartEC2SpringRequest) GetSpring() *SpringRequest {
	if x != nil {
		return x.Spring
	}
	return nil
}

func (x *StartEC2SpringRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *StartEC2SpringRequest) GetFirst() bool {
	if x != nil {
		return x.First
	}
	return false
}

type StartS3ReactRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	S3            *S3Request             `protobuf:"bytes,1,opt,name=S3,proto3" json:"S3,omitempty"`
	React         *ReactRequest          `protobuf:"bytes,2,opt,name=React,proto3" json:"React,omitempty"`
	DeploymentId  string                 `protobuf:"bytes,3,opt,name=DeploymentId,proto3" json:"DeploymentId,omitempty"`
	ComponentId   string                 `protobuf:"bytes,4,opt,name=ComponentId,proto3" json:"ComponentId,omitempty"`
	First         bool                   `protobuf:"varint,5,opt,name=first,proto3" json:"first,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartS3ReactRequest) Reset() {
	*x = StartS3ReactRequest{}
	mi := &file_provision_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartS3ReactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartS3ReactRequest) ProtoMessage() {}

func (x *StartS3ReactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provision_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartS3ReactRequest.ProtoReflect.Descriptor instead.
func (*StartS3ReactRequest) Descriptor() ([]byte, []int) {
	return file_provision_proto_rawDescGZIP(), []int{7}
}

func (x *StartS3ReactRequest) GetS3() *S3Request {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *StartS3ReactRequest) GetReact() *ReactRequest {
	if x != nil {
		return x.React
	}
	return nil
}

func (x *StartS3ReactRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *StartS3ReactRequest) GetComponentId() string {
	if x != nil {
		return x.ComponentId
	}
	return ""
}

func (x *StartS3ReactRequest) GetFirst() bool {
	if x != nil {
		return x.First
	}
	return false
}

type StartEC2MySQLRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EC2           *EC2Request            `protobuf:"bytes,1,opt,name=EC2,proto3" json:"EC2,omitempty"`
	MySQL         *MySQLRequest          `protobuf:"bytes,2,opt,name=MySQL,proto3" json:"MySQL,omitempty"`
	DeploymentId  string                 `protobuf:"bytes,3,opt,name=DeploymentId,proto3" json:"DeploymentId,omitempty"`
	ComponentId   string                 `protobuf:"bytes,4,opt,name=ComponentId,proto3" json:"ComponentId,omitempty"`
	First         bool                   `protobuf:"varint,5,opt,name=first,proto3" json:"first,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartEC2MySQLRequest) Reset() {
	*x = StartEC2MySQLRequest{}
	mi := &file_provision_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartEC2MySQLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartEC2MySQLRequest) ProtoMessage() {}

func (x *StartEC2MySQLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provision_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartEC2MySQLRequest.ProtoReflect.Descriptor instead.
func (*StartEC2MySQLRequest) Descriptor() ([]byte, []int) {
	return file_provision_proto_rawDescGZIP(), []int{8}
}

func (x *StartEC2MySQLRequest) GetEC2() *EC2Request {
	if x != nil {
		return x.EC2
	}
	return nil
}

func (x *StartEC2MySQLRequest) GetMySQL() *MySQLRequest {
	if x != nil {
		return x.MySQL
	}
	return nil
}

func (x *StartEC2MySQLRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *StartEC2MySQLRequest) GetComponentId() string {
	if x != nil {
		return x.ComponentId
	}
	return ""
}

func (x *StartEC2MySQLRequest) GetFirst() bool {
	if x != nil {
		return x.First
	}
	return false
}

type ComponentSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Component:
	//
	//	*ComponentSpec_EC2
	//	*ComponentSpec_S3
	//	*ComponentSpec_Spring
	//	*ComponentSpec_MySQL
	//	*ComponentSpec_React
	Component     isComponentSpec_Component `protobuf_oneof:"component"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentSpec) Reset() {
	*x = ComponentSpec{}
	mi := &file_provision_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentSpec) ProtoMessage() {}

func (x *ComponentSpec) ProtoReflect() protoreflect.Message {
	mi := &file_provision_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentSpec.ProtoReflect.Descriptor instead.
func (*ComponentSpec) Descriptor() ([]byte, []int) {
	return file_provision_proto_rawDescGZIP(), []int{9}
}

func (x *ComponentSpec) GetComponent() isComponentSpec_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *ComponentSpec) GetEC2() *EC2Request {
	if x != nil {
		if x, ok := x.Component.(*ComponentSpec_EC2); ok {
			return x.EC2
		}
	}
	return nil
}

func (x *ComponentSpec) GetS3() *S3Request {
	if x != nil {
		if x, ok := x.Component.(*ComponentSpec_S3); ok {
			return x.S3
		}
	}
	return nil
}

func (x *ComponentSpec) GetSpring() *SpringRequest {
	if x != nil {
		if x, ok := x.Component.(*ComponentSpec_Spring); ok {
			return x.Spring
		}
	}
	return nil
}

func (x *ComponentSpec) GetMySQL() *MySQLRequest {
	if x != nil {
		if x, ok := x.Component.(*ComponentSpec_MySQL); ok {
			return x.MySQL
		}
	}
	return nil
}

func (x *ComponentSpec) GetReact() *ReactRequest {
	if x != nil {
		if x, ok := x.Component.(*ComponentSpec_React); ok {
			return x.React
		}
	}
	return nil
}

type isComponentSpec_Component interface {
	isComponentSpec_Component()
}

type ComponentSpec_EC2 struct {
	EC2 *EC2Request `protobuf:"bytes,1,opt,name=EC2,proto3,oneof"`
}

type ComponentSpec_S3 struct {
	S3 *S3Request `protobuf:"bytes,2,opt,name=S3,proto3,oneof"`
}

type ComponentSpec_Spring struct {
	Spring *SpringRequest `protobuf:"bytes,3,opt,name=Spring,proto3,oneof"`
}

type ComponentSpec_MySQL struct {
	MySQL *MySQLRequest `protobuf:"bytes,4,opt,name=MySQL,proto3,oneof"`
}

type ComponentSpec_React struct {
	React *ReactRequest `protobuf:"bytes,5,opt,name=React,proto3,oneof"`
}

func (*ComponentSpec_EC2) isComponentSpec_Component() {}

func (*ComponentSpec_S3) isComponentSpec_Component() {}

func (*ComponentSpec_Spring) isComponentSpec_Component() {}

func (*ComponentSpec_MySQL) isComponentSpec_Component() {}

func (*ComponentSpec_React) isComponentSpec_Component() {}

type DeploymentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeploymentId  string                 `protobuf:"bytes,1,opt,name=DeploymentId,proto3" json:"DeploymentId,omitempty"`
	Components    []*ComponentSpec       `protobuf:"bytes,2,rep,name=Components,proto3" json:"Components,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeploymentRequest) Reset() {
	*x = DeploymentRequest{}
	mi := &file_provision_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentRequest) ProtoMessage() {}

func (x *DeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provision_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentRequest.ProtoReflect.Descriptor instead.
func (*DeploymentRequest) Descriptor() ([]byte, []int) {
	return file_provision_proto_rawDescGZIP(), []int{10}
}

func (x *DeploymentRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *DeploymentRequest) GetComponents() []*ComponentSpec {
	if x != nil {
		return x.Components
	}
	return nil
}

type DeployLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeploymentId  string                 `protobuf:"bytes,1,opt,name=DeploymentId,proto3" json:"DeploymentId,omitempty"`
	ComponentId   string                 `protobuf:"bytes,2,opt,name=ComponentId,proto3" json:"ComponentId,omitempty"`
	LogLine       string                 `protobuf:"bytes,3,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeployLog) Reset() {
	*x = DeployLog{}
	mi := &file_provision_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeployLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployLog) ProtoMessage() {}

func (x *DeployLog) ProtoReflect() protoreflect.Message {
	mi := &file_provision_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployLog.ProtoReflect.Descriptor instead.
func (*DeployLog) Descriptor() ([]byte, []int) {
	return file_provision_proto_rawDescGZIP(), []int{11}
}

func (x *DeployLog) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *DeployLog) GetComponentId() string {
	if x != nil {
		return x.ComponentId
	}
	return ""
}

func (x *DeployLog) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

type StatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Data          map[string]string      `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_provision_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provision_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_provision_proto_rawDescGZIP(), []int{12}
}

func (x *StatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StatusResponse) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type CostResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cost          string                 `protobuf:"bytes,1,opt,name=cost,proto3" json:"cost,omitempty"`
	Data          map[string]string      `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CostResponse) Reset() {
	*x = CostResponse{}
	mi := &file_provision_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostResponse) ProtoMessage() {}

func (x *CostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provision_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostResponse.ProtoReflect.Descriptor instead.
func (*CostResponse) Descriptor() ([]byte, []int) {
	return file_provision_proto_rawDescGZIP(), []int{13}
}

func (x *CostResponse) GetCost() string {
	if x != nil {
		return x.Cost
	}
	return ""
}

func (x *CostResponse) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeploymentId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeploymentId  string                 `protobuf:"bytes,1,opt,name=DeploymentId,proto3" json:"DeploymentId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeploymentId) Reset() {
	*x = DeploymentId{}
	mi := &file_provision_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeploymentId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentId) ProtoMessage() {}

func (x *DeploymentId) ProtoReflect() protoreflect.Message {
	mi := &file_provision_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentId.ProtoReflect.Descriptor instead.
func (*DeploymentId) Descriptor() ([]byte, []int) {
	return file_provision_proto_rawDescGZIP(), []int{14}
}

func (x *DeploymentId) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

type ProvisionLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ComponentId   string                 `protobuf:"bytes,1,opt,name=ComponentId,proto3" json:"ComponentId,omitempty"`
	LogLine       string                 `protobuf:"bytes,2,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProvisionLog) Reset() {
	*x = ProvisionLog{}
	mi := &file_provision_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProvisionLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionLog) ProtoMessage() {}

func (x *ProvisionLog) ProtoReflect() protoreflect.Message {
	mi := &file_provision_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionLog.ProtoReflect.Descriptor instead.
func (*ProvisionLog) Descriptor() ([]byte, []int) {
	return file_provision_proto_rawDescGZIP(), []int{15}
}

func (x *ProvisionLog) GetComponentId() string {
	if x != nil {
		return x.ComponentId
	}
	return ""
}

func (x *ProvisionLog) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

var File_provision_proto protoreflect.FileDescriptor

const file_provision_proto_rawDesc = "" +
	"\n" +
	"\x0fprovision.proto\x12\tprovision\"\x86\x02\n" +
	"\n" +
	"EC2Request\x12\"\n" +
	"\fInstanceType\x18\x01 \x01(\tR\fInstanceType\x12\x16\n" +
	"\x06Region\x18\x02 \x01(\tR\x06Region\x12\x10\n" +
	"\x03AMI\x18\x03 \x01(\tR\x03AMI\x12\"\n" +
	"\fInstanceName\x18\x04 \x01(\tR\fInstanceName\x12\x1c\n" +
	"\tOpenPorts\x18\x05 \x03(\x05R\tOpenPorts\x12\"\n" +
	"\fAWSAccessKey\x18\x06 \x01(\tR\fAWSAccessKey\x12\"\n" +
	"\fAWSSecretKey\x18\a \x01(\tR\fAWSSecretKey\x12 \n" +
	"\vComponentId\x18\b \x01(\tR\vComponentId\"\xad\x01\n" +
	"\tS3Request\x12\x1e\n" +
	"\n" +
	"BucketName\x18\x01 \x01(\tR\n" +
	"BucketName\x12\x16\n" +
	"\x06Region\x18\x02 \x01(\tR\x06Region\x12\"\n" +
	"\fAWSAccessKey\x18\x03 \x01(\tR\fAWSAccessKey\x12\"\n" +
	"\fAWSSecretKey\x18\x04 \x01(\tR\fAWSSecretKey\x12 \n" +
	"\vComponentId\x18\x05 \x01(\tR\vComponentId\"1\n" +
	"\rGitCredential\x12\x0e\n" +
	"\x02Id\x18\x01 \x01(\tR\x02Id\x12\x10\n" +
	"\x03Key\x18\x02 \x01(\tR\x03Key\"\xb8\x01\n" +
	"\fReactRequest\x12,\n" +
	"\x11ParentComponentId\x18\x01 \x01(\tR\x11ParentComponentId\x12>\n" +
	"\rGitCredential\x18\x02 \x01(\v2\x18.provision.GitCredentialR\rGitCredential\x12 \n" +
	"\vComponentId\x18\x03 \x01(\tR\vComponentId\x12\x18\n" +
	"\aGitRepo\x18\x04 \x01(\tR\aGitRepo\"\x8a\x02\n" +
	"\fMySQLRequest\x12,\n" +
	"\x11MySQLRootPassword\x18\x01 \x01(\tR\x11MySQLRootPassword\x12$\n" +
	"\rMySQLDatabase\x18\x02 \x01(\tR\rMySQLDatabase\x12\x1c\n" +
	"\tMySQLUser\x18\x03 \x01(\tR\tMySQLUser\x12$\n" +
	"\rMySQLPassword\x18\x04 \x01(\tR\rMySQLPassword\x12\x12\n" +
	"\x04Port\x18\x05 \x01(\x05R\x04Port\x12,\n" +
	"\x11ParentComponentId\x18\x06 \x01(\tR\x11ParentComponentId\x12 \n" +
	"\vComponentId\x18\a \x01(\tR\vComponentId\"\xa2\x03\n" +
	"\rSpringRequest\x12,\n" +
	"\x11ParentComponentId\x18\x01 \x01(\tR\x11ParentComponentId\x12\x18\n" +
	"\aGitRepo\x18\x02 \x01(\tR\aGitRepo\x12\x1c\n" +
	"\tNginxPort\x18\x03 \x01(\x05R\tNginxPort\x12\x1c\n" +
	"\tBuildTool\x18\x04 \x01(\tR\tBuildTool\x12\x1e\n" +
	"\n" +
	"JDKVersion\x18\x05 \x01(\tR\n" +
	"JDKVersion\x123\n" +
	"\x03Env\x18\x06 \x03(\v2!.provision.SpringRequest.EnvEntryR\x03Env\x12>\n" +
	"\rGitCredential\x18\a \x01(\v2\x18.provision.GitCredentialR\rGitCredential\x12\x1e\n" +
	"\n" +
	"DockerPort\x18\b \x01(\x05R\n" +
	"DockerPort\x12 \n" +
	"\vComponentId\x18\t \x01(\tR\vComponentId\x1a6\n" +
	"\bEnvEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xac\x01\n" +
	"\x15StartEC2SpringRequest\x12'\n" +
	"\x03EC2\x18\x01 \x01(\v2\x15.provision.EC2RequestR\x03EC2\x120\n" +
	"\x06Spring\x18\x02 \x01(\v2\x18.provision.SpringRequestR\x06Spring\x12\"\n" +
	"\fDeploymentId\x18\x03 \x01(\tR\fDeploymentId\x12\x14\n" +
	"\x05first\x18\x04 \x01(\bR\x05first\"\xc6\x01\n" +
	"\x13StartS3ReactRequest\x12$\n" +
	"\x02S3\x18\x01 \x01(\v2\x14.provision.S3RequestR\x02S3\x12-\n" +
	"\x05React\x18\x02 \x01(\v2\x17.provision.ReactRequestR\x05React\x12\"\n" +
	"\fDeploymentId\x18\x03 \x01(\tR\fDeploymentId\x12 \n" +
	"\vComponentId\x18\x04 \x01(\tR\vComponentId\x12\x14\n" +
	"\x05first\x18\x05 \x01(\bR\x05first\"\xca\x01\n" +
	"\x14StartEC2MySQLRequest\x12'\n" +
	"\x03EC2\x18\x01 \x01(\v2\x15.provision.EC2RequestR\x03EC2\x12-\n" +
	"\x05MySQL\x18\x02 \x01(\v2\x17.provision.MySQLRequestR\x05MySQL\x12\"\n" +
	"\fDeploymentId\x18\x03 \x01(\tR\fDeploymentId\x12 \n" +
	"\vComponentId\x18\x04 \x01(\tR\vComponentId\x12\x14\n" +
	"\x05first\x18\x05 \x01(\bR\x05first\"\x85\x02\n" +
	"\rComponentSpec\x12)\n" +
	"\x03EC2\x18\x01 \x01(\v2\x15.provision.EC2RequestH\x00R\x03EC2\x12&\n" +
	"\x02S3\x18\x02 \x01(\v2\x14.provision.S3RequestH\x00R\x02S3\x122\n" +
	"\x06Spring\x18\x03 \x01(\v2\x18.provision.SpringRequestH\x00R\x06Spring\x12/\n" +
	"\x05MySQL\x18\x04 \x01(\v2\x17.provision.MySQLRequestH\x00R\x05MySQL\x12/\n" +
	"\x05React\x18\x05 \x01(\v2\x17.provision.ReactRequestH\x00R\x05ReactB\v\n" +
	"\tcomponent\"q\n" +
	"\x11DeploymentRequest\x12\"\n" +
	"\fDeploymentId\x18\x01 \x01(\tR\fDeploymentId\x128\n" +
	"\n" +
	"Components\x18\x02 \x03(\v2\x18.provision.ComponentSpecR\n" +
	"Components\"l\n" +
	"\tDeployLog\x12\"\n" +
	"\fDeploymentId\x18\x01 \x01(\tR\fDeploymentId\x12 \n" +
	"\vComponentId\x18\x02 \x01(\tR\vComponentId\x12\x19\n" +
	"\blog_line\x18\x03 \x01(\tR\alogLine\"\x9a\x01\n" +
	"\x0eStatusResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x127\n" +
	"\x04data\x18\x02 \x03(\v2#.provision.StatusResponse.DataEntryR\x04data\x1a7\n" +
	"\tDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x92\x01\n" +
	"\fCostResponse\x12\x12\n" +
	"\x04cost\x18\x01 \x01(\tR\x04cost\x125\n" +
	"\x04data\x18\x02 \x03(\v2!.provision.CostResponse.DataEntryR\x04data\x1a7\n" +
	"\tDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"2\n" +
	"\fDeploymentId\x12\"\n" +
	"\fDeploymentId\x18\x01 \x01(\tR\fDeploymentId\"K\n" +
	"\fProvisionLog\x12 \n" +
	"\vComponentId\x18\x01 \x01(\tR\vComponentId\x12\x19\n" +
	"\blog_line\x18\x02 \x01(\tR\alogLine2\xae\x02\n" +
	"\x13ProvisioningService\x12K\n" +
	"\x10DestroyComponent\x12\x1c.provision.DeploymentRequest\x1a\x19.provision.StatusResponse\x12C\n" +
	"\n" +
	"PlanDeploy\x12\x1c.provision.DeploymentRequest\x1a\x17.provision.CostResponse\x12>\n" +
	"\x06Deploy\x12\x1c.provision.DeploymentRequest\x1a\x14.provision.DeployLog0\x01\x12E\n" +
	"\n" +
	"StopDeploy\x12\x1c.provision.DeploymentRequest\x1a\x19.provision.StatusResponseB\bZ\x06proto/b\x06proto3"

var (
	file_provision_proto_rawDescOnce sync.Once
	file_provision_proto_rawDescData []byte
)

func file_provision_proto_rawDescGZIP() []byte {
	file_provision_proto_rawDescOnce.Do(func() {
		file_provision_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_provision_proto_rawDesc), len(file_provision_proto_rawDesc)))
	})
	return file_provision_proto_rawDescData
}

var file_provision_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_provision_proto_goTypes = []any{
	(*EC2Request)(nil),            // 0: provision.EC2Request
	(*S3Request)(nil),             // 1: provision.S3Request
	(*GitCredential)(nil),         // 2: provision.GitCredential
	(*ReactRequest)(nil),          // 3: provision.ReactRequest
	(*MySQLRequest)(nil),          // 4: provision.MySQLRequest
	(*SpringRequest)(nil),         // 5: provision.SpringRequest
	(*StartEC2SpringRequest)(nil), // 6: provision.StartEC2SpringRequest
	(*StartS3ReactRequest)(nil),   // 7: provision.StartS3ReactRequest
	(*StartEC2MySQLRequest)(nil),  // 8: provision.StartEC2MySQLRequest
	(*ComponentSpec)(nil),         // 9: provision.ComponentSpec
	(*DeploymentRequest)(nil),     // 10: provision.DeploymentRequest
	(*DeployLog)(nil),             // 11: provision.DeployLog
	(*StatusResponse)(nil),        // 12: provision.StatusResponse
	(*CostResponse)(nil),          // 13: provision.CostResponse
	(*DeploymentId)(nil),          // 14: provision.DeploymentId
	(*ProvisionLog)(nil),          // 15: provision.ProvisionLog
	nil,                           // 16: provision.SpringRequest.EnvEntry
	nil,                           // 17: provision.StatusResponse.DataEntry
	nil,                           // 18: provision.CostResponse.DataEntry
}
var file_provision_proto_depIdxs = []int32{
	2,  // 0: provision.ReactRequest.GitCredential:type_name -> provision.GitCredential
	16, // 1: provision.SpringRequest.Env:type_name -> provision.SpringRequest.EnvEntry
	2,  // 2: provision.SpringRequest.GitCredential:type_name -> provision.GitCredential
	0,  // 3: provision.StartEC2SpringRequest.EC2:type_name -> provision.EC2Request
	5,  // 4: provision.StartEC2SpringRequest.Spring:type_name -> provision.SpringRequest
	1,  // 5: provision.StartS3ReactRequest.S3:type_name -> provision.S3Request
	3,  // 6: provision.StartS3ReactRequest.React:type_name -> provision.ReactRequest
	0,  // 7: provision.StartEC2MySQLRequest.EC2:type_name -> provision.EC2Request
	4,  // 8: provision.StartEC2MySQLRequest.MySQL:type_name -> provision.MySQLRequest
	0,  // 9: provision.ComponentSpec.EC2:type_name -> provision.EC2Request
	1,  // 10: provision.ComponentSpec.S3:type_name -> provision.S3Request
	5,  // 11: provision.ComponentSpec.Spring:type_name -> provision.SpringRequest
	4,  // 12: provision.ComponentSpec.MySQL:type_name -> provision.MySQLRequest
	3,  // 13: provision.ComponentSpec.React:type_name -> provision.ReactRequest
	9,  // 14: provision.DeploymentRequest.Components:type_name -> provision.ComponentSpec
	17, // 15: provision.StatusResponse.data:type_name -> provision.StatusResponse.DataEntry
	18, // 16: provision.CostResponse.data:type_name -> provision.CostResponse.DataEntry
	10, // 17: provision.ProvisioningService.DestroyComponent:input_type -> provision.DeploymentRequest
	10, // 18: provision.ProvisioningService.PlanDeploy:input_type -> provision.DeploymentRequest
	10, // 19: provision.ProvisioningService.Deploy:input_type -> provision.DeploymentRequest
	10, // 20: provision.ProvisioningService.StopDeploy:input_type -> provision.DeploymentRequest
	12, // 21: provision.ProvisioningService.DestroyComponent:output_type -> provision.StatusResponse
	13, // 22: provision.ProvisioningService.PlanDeploy:output_type -> provision.CostResponse
	11, // 23: provision.ProvisioningService.Deploy:output_type -> provision.DeployLog
	12, // 24: provision.ProvisioningService.StopDeploy:output_type -> provision.StatusResponse
	21, // [21:25] is the sub-list for method output_type
	17, // [17:21] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_provision_proto_init() }
func file_provision_proto_init() {
	if File_provision_proto != nil {
		return
	}
	file_provision_proto_msgTypes[9].OneofWrappers = []any{
		(*ComponentSpec_EC2)(nil),
		(*ComponentSpec_S3)(nil),
		(*ComponentSpec_Spring)(nil),
		(*ComponentSpec_MySQL)(nil),
		(*ComponentSpec_React)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_provision_proto_rawDesc), len(file_provision_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_provision_proto_goTypes,
		DependencyIndexes: file_provision_proto_depIdxs,
		MessageInfos:      file_provision_proto_msgTypes,
	}.Build()
	File_provision_proto = out.File
	file_provision_proto_goTypes = nil
	file_provision_proto_depIdxs = nil
}
