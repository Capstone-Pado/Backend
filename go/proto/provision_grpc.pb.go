// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: provision.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProvisioningService_DestroyComponent_FullMethodName = "/provision.ProvisioningService/DestroyComponent"
	ProvisioningService_PlanDeploy_FullMethodName       = "/provision.ProvisioningService/PlanDeploy"
	ProvisioningService_Deploy_FullMethodName           = "/provision.ProvisioningService/Deploy"
	ProvisioningService_StopDeploy_FullMethodName       = "/provision.ProvisioningService/StopDeploy"
)

// ProvisioningServiceClient is the client API for ProvisioningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProvisioningServiceClient interface {
	DestroyComponent(ctx context.Context, in *DeploymentRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	PlanDeploy(ctx context.Context, in *DeploymentRequest, opts ...grpc.CallOption) (*CostResponse, error)
	Deploy(ctx context.Context, in *DeploymentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DeployLog], error)
	StopDeploy(ctx context.Context, in *DeploymentRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type provisioningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProvisioningServiceClient(cc grpc.ClientConnInterface) ProvisioningServiceClient {
	return &provisioningServiceClient{cc}
}

func (c *provisioningServiceClient) DestroyComponent(ctx context.Context, in *DeploymentRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, ProvisioningService_DestroyComponent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisioningServiceClient) PlanDeploy(ctx context.Context, in *DeploymentRequest, opts ...grpc.CallOption) (*CostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CostResponse)
	err := c.cc.Invoke(ctx, ProvisioningService_PlanDeploy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisioningServiceClient) Deploy(ctx context.Context, in *DeploymentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DeployLog], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProvisioningService_ServiceDesc.Streams[0], ProvisioningService_Deploy_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DeploymentRequest, DeployLog]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProvisioningService_DeployClient = grpc.ServerStreamingClient[DeployLog]

func (c *provisioningServiceClient) StopDeploy(ctx context.Context, in *DeploymentRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, ProvisioningService_StopDeploy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProvisioningServiceServer is the server API for ProvisioningService service.
// All implementations must embed UnimplementedProvisioningServiceServer
// for forward compatibility.
type ProvisioningServiceServer interface {
	DestroyComponent(context.Context, *DeploymentRequest) (*StatusResponse, error)
	PlanDeploy(context.Context, *DeploymentRequest) (*CostResponse, error)
	Deploy(*DeploymentRequest, grpc.ServerStreamingServer[DeployLog]) error
	StopDeploy(context.Context, *DeploymentRequest) (*StatusResponse, error)
	mustEmbedUnimplementedProvisioningServiceServer()
}

// UnimplementedProvisioningServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProvisioningServiceServer struct{}

func (UnimplementedProvisioningServiceServer) DestroyComponent(context.Context, *DeploymentRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyComponent not implemented")
}
func (UnimplementedProvisioningServiceServer) PlanDeploy(context.Context, *DeploymentRequest) (*CostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlanDeploy not implemented")
}
func (UnimplementedProvisioningServiceServer) Deploy(*DeploymentRequest, grpc.ServerStreamingServer[DeployLog]) error {
	return status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}
func (UnimplementedProvisioningServiceServer) StopDeploy(context.Context, *DeploymentRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDeploy not implemented")
}
func (UnimplementedProvisioningServiceServer) mustEmbedUnimplementedProvisioningServiceServer() {}
func (UnimplementedProvisioningServiceServer) testEmbeddedByValue()                             {}

// UnsafeProvisioningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProvisioningServiceServer will
// result in compilation errors.
type UnsafeProvisioningServiceServer interface {
	mustEmbedUnimplementedProvisioningServiceServer()
}

func RegisterProvisioningServiceServer(s grpc.ServiceRegistrar, srv ProvisioningServiceServer) {
	// If the following call pancis, it indicates UnimplementedProvisioningServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProvisioningService_ServiceDesc, srv)
}

func _ProvisioningService_DestroyComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisioningServiceServer).DestroyComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProvisioningService_DestroyComponent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisioningServiceServer).DestroyComponent(ctx, req.(*DeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisioningService_PlanDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisioningServiceServer).PlanDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProvisioningService_PlanDeploy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisioningServiceServer).PlanDeploy(ctx, req.(*DeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisioningService_Deploy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeploymentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProvisioningServiceServer).Deploy(m, &grpc.GenericServerStream[DeploymentRequest, DeployLog]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProvisioningService_DeployServer = grpc.ServerStreamingServer[DeployLog]

func _ProvisioningService_StopDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisioningServiceServer).StopDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProvisioningService_StopDeploy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisioningServiceServer).StopDeploy(ctx, req.(*DeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProvisioningService_ServiceDesc is the grpc.ServiceDesc for ProvisioningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProvisioningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "provision.ProvisioningService",
	HandlerType: (*ProvisioningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DestroyComponent",
			Handler:    _ProvisioningService_DestroyComponent_Handler,
		},
		{
			MethodName: "PlanDeploy",
			Handler:    _ProvisioningService_PlanDeploy_Handler,
		},
		{
			MethodName: "StopDeploy",
			Handler:    _ProvisioningService_StopDeploy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Deploy",
			Handler:       _ProvisioningService_Deploy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "provision.proto",
}
