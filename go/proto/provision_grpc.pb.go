// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: provision.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProvisioningService_StartEC2Spring_FullMethodName      = "/provision.ProvisioningService/StartEC2Spring"
	ProvisioningService_StartEC2MySQL_FullMethodName       = "/provision.ProvisioningService/StartEC2MySQL"
	ProvisioningService_StartS3React_FullMethodName        = "/provision.ProvisioningService/StartS3React"
	ProvisioningService_StreamProvisionLogs_FullMethodName = "/provision.ProvisioningService/StreamProvisionLogs"
	ProvisioningService_StreamComponentLogs_FullMethodName = "/provision.ProvisioningService/StreamComponentLogs"
)

// ProvisioningServiceClient is the client API for ProvisioningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProvisioningServiceClient interface {
	StartEC2Spring(ctx context.Context, in *StartEC2SpringRequest, opts ...grpc.CallOption) (*ProvisionStartResponse, error)
	StartEC2MySQL(ctx context.Context, in *StartEC2MySQLRequest, opts ...grpc.CallOption) (*ProvisionStartResponse, error)
	StartS3React(ctx context.Context, in *StartS3ReactRequest, opts ...grpc.CallOption) (*ProvisionStartResponse, error)
	StreamProvisionLogs(ctx context.Context, in *ProvisionLogRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProvisionLog], error)
	StreamComponentLogs(ctx context.Context, in *ComponentLogRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProvisionLog], error)
}

type provisioningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProvisioningServiceClient(cc grpc.ClientConnInterface) ProvisioningServiceClient {
	return &provisioningServiceClient{cc}
}

func (c *provisioningServiceClient) StartEC2Spring(ctx context.Context, in *StartEC2SpringRequest, opts ...grpc.CallOption) (*ProvisionStartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProvisionStartResponse)
	err := c.cc.Invoke(ctx, ProvisioningService_StartEC2Spring_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisioningServiceClient) StartEC2MySQL(ctx context.Context, in *StartEC2MySQLRequest, opts ...grpc.CallOption) (*ProvisionStartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProvisionStartResponse)
	err := c.cc.Invoke(ctx, ProvisioningService_StartEC2MySQL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisioningServiceClient) StartS3React(ctx context.Context, in *StartS3ReactRequest, opts ...grpc.CallOption) (*ProvisionStartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProvisionStartResponse)
	err := c.cc.Invoke(ctx, ProvisioningService_StartS3React_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisioningServiceClient) StreamProvisionLogs(ctx context.Context, in *ProvisionLogRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProvisionLog], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProvisioningService_ServiceDesc.Streams[0], ProvisioningService_StreamProvisionLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProvisionLogRequest, ProvisionLog]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProvisioningService_StreamProvisionLogsClient = grpc.ServerStreamingClient[ProvisionLog]

func (c *provisioningServiceClient) StreamComponentLogs(ctx context.Context, in *ComponentLogRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProvisionLog], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProvisioningService_ServiceDesc.Streams[1], ProvisioningService_StreamComponentLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ComponentLogRequest, ProvisionLog]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProvisioningService_StreamComponentLogsClient = grpc.ServerStreamingClient[ProvisionLog]

// ProvisioningServiceServer is the server API for ProvisioningService service.
// All implementations must embed UnimplementedProvisioningServiceServer
// for forward compatibility.
type ProvisioningServiceServer interface {
	StartEC2Spring(context.Context, *StartEC2SpringRequest) (*ProvisionStartResponse, error)
	StartEC2MySQL(context.Context, *StartEC2MySQLRequest) (*ProvisionStartResponse, error)
	StartS3React(context.Context, *StartS3ReactRequest) (*ProvisionStartResponse, error)
	StreamProvisionLogs(*ProvisionLogRequest, grpc.ServerStreamingServer[ProvisionLog]) error
	StreamComponentLogs(*ComponentLogRequest, grpc.ServerStreamingServer[ProvisionLog]) error
	mustEmbedUnimplementedProvisioningServiceServer()
}

// UnimplementedProvisioningServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProvisioningServiceServer struct{}

func (UnimplementedProvisioningServiceServer) StartEC2Spring(context.Context, *StartEC2SpringRequest) (*ProvisionStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartEC2Spring not implemented")
}
func (UnimplementedProvisioningServiceServer) StartEC2MySQL(context.Context, *StartEC2MySQLRequest) (*ProvisionStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartEC2MySQL not implemented")
}
func (UnimplementedProvisioningServiceServer) StartS3React(context.Context, *StartS3ReactRequest) (*ProvisionStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartS3React not implemented")
}
func (UnimplementedProvisioningServiceServer) StreamProvisionLogs(*ProvisionLogRequest, grpc.ServerStreamingServer[ProvisionLog]) error {
	return status.Errorf(codes.Unimplemented, "method StreamProvisionLogs not implemented")
}
func (UnimplementedProvisioningServiceServer) StreamComponentLogs(*ComponentLogRequest, grpc.ServerStreamingServer[ProvisionLog]) error {
	return status.Errorf(codes.Unimplemented, "method StreamComponentLogs not implemented")
}
func (UnimplementedProvisioningServiceServer) mustEmbedUnimplementedProvisioningServiceServer() {}
func (UnimplementedProvisioningServiceServer) testEmbeddedByValue()                             {}

// UnsafeProvisioningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProvisioningServiceServer will
// result in compilation errors.
type UnsafeProvisioningServiceServer interface {
	mustEmbedUnimplementedProvisioningServiceServer()
}

func RegisterProvisioningServiceServer(s grpc.ServiceRegistrar, srv ProvisioningServiceServer) {
	// If the following call pancis, it indicates UnimplementedProvisioningServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProvisioningService_ServiceDesc, srv)
}

func _ProvisioningService_StartEC2Spring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartEC2SpringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisioningServiceServer).StartEC2Spring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProvisioningService_StartEC2Spring_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisioningServiceServer).StartEC2Spring(ctx, req.(*StartEC2SpringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisioningService_StartEC2MySQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartEC2MySQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisioningServiceServer).StartEC2MySQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProvisioningService_StartEC2MySQL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisioningServiceServer).StartEC2MySQL(ctx, req.(*StartEC2MySQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisioningService_StartS3React_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartS3ReactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisioningServiceServer).StartS3React(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProvisioningService_StartS3React_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisioningServiceServer).StartS3React(ctx, req.(*StartS3ReactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisioningService_StreamProvisionLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProvisionLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProvisioningServiceServer).StreamProvisionLogs(m, &grpc.GenericServerStream[ProvisionLogRequest, ProvisionLog]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProvisioningService_StreamProvisionLogsServer = grpc.ServerStreamingServer[ProvisionLog]

func _ProvisioningService_StreamComponentLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ComponentLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProvisioningServiceServer).StreamComponentLogs(m, &grpc.GenericServerStream[ComponentLogRequest, ProvisionLog]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProvisioningService_StreamComponentLogsServer = grpc.ServerStreamingServer[ProvisionLog]

// ProvisioningService_ServiceDesc is the grpc.ServiceDesc for ProvisioningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProvisioningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "provision.ProvisioningService",
	HandlerType: (*ProvisioningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartEC2Spring",
			Handler:    _ProvisioningService_StartEC2Spring_Handler,
		},
		{
			MethodName: "StartEC2MySQL",
			Handler:    _ProvisioningService_StartEC2MySQL_Handler,
		},
		{
			MethodName: "StartS3React",
			Handler:    _ProvisioningService_StartS3React_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamProvisionLogs",
			Handler:       _ProvisioningService_StreamProvisionLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamComponentLogs",
			Handler:       _ProvisioningService_StreamComponentLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "provision.proto",
}
